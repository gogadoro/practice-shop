{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCR8wdcaCzNTJHa9yoOST241p3hOOD8Fpo\",\n  authDomain: \"practice-shop-db-1ad74.firebaseapp.com\",\n  projectId: \"practice-shop-db-1ad74\",\n  storageBucket: \"practice-shop-db-1ad74.appspot.com\",\n  messagingSenderId: \"631247507579\",\n  appId: \"1:631247507579:web:cb6839dc34037bffbed2de\"\n};\nconst firebaseApp = initializeApp(firebaseConfig);\nconst GoogleProvider = new GoogleAuthProvider();\nexport const auth = getAuth();\nexport const signIn_GooglePopup = () => signInWithPopup(auth, GoogleProvider);\nexport const signIn_GoogleRedirect = () => signInWithRedirect(auth, GoogleProvider);\nexport const db = getFirestore();\nexport const setUserDbFromAuth = async function (userAuth) {\n  let additionalInfor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  console.log('docRef :', userDocRef);\n  const userSnapshot = await getDoc(userDocRef);\n  console.log('snapshot :', userSnapshot);\n  console.log(userSnapshot.exists());\n\n  if (!userSnapshot.exists()) {\n    const email = userAuth.email;\n    const displayName = userAuth.displayName;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        email,\n        displayName,\n        createdAt,\n        ...additionalInfor\n      });\n    } catch (eer) {\n      console.log('error creating the user', eer.message);\n    }\n  }\n\n  return userDocRef;\n};\nexport const createUserAuthWithEmailAndPassword = async (email, password) => {\n  if (!email | !password) {\n    console.log('이메일,암호가 전달되지 않음');\n    return;\n  }\n\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInUserAuthWithEmailAndPassword = async (email, password) => {\n  if (!email | !password) {\n    console.log('이메일,암호가 전달되지 않음');\n    return;\n  }\n\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutUser = async () => await signOut(auth);","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","GoogleProvider","auth","signIn_GooglePopup","signIn_GoogleRedirect","db","setUserDbFromAuth","userAuth","additionalInfor","userDocRef","uid","console","log","userSnapshot","exists","email","displayName","createdAt","Date","eer","message","createUserAuthWithEmailAndPassword","password","signInUserAuthWithEmailAndPassword","signOutUser"],"sources":["/Users/5e9e/Desktop/projects/web_apps/react/capston/practice-shop/src/utils/firebase/firebase.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\nimport {\n    getAuth,\n    signInWithRedirect,\n    signInWithPopup,\n    GoogleAuthProvider,\n    createUserWithEmailAndPassword,\n    signInWithEmailAndPassword,\n    signOut,\n} from 'firebase/auth'\n\nimport {\n    getFirestore,\n    doc,\n    getDoc,\n    setDoc,\n} from 'firebase/firestore';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCR8wdcaCzNTJHa9yoOST241p3hOOD8Fpo\",\n    authDomain: \"practice-shop-db-1ad74.firebaseapp.com\",\n    projectId: \"practice-shop-db-1ad74\",\n    storageBucket: \"practice-shop-db-1ad74.appspot.com\",\n    messagingSenderId: \"631247507579\",\n    appId: \"1:631247507579:web:cb6839dc34037bffbed2de\"\n};\n\nconst firebaseApp = initializeApp(firebaseConfig);\n\nconst GoogleProvider = new GoogleAuthProvider();\n\nexport const auth = getAuth();\nexport const signIn_GooglePopup = () => signInWithPopup(auth, GoogleProvider)\nexport const signIn_GoogleRedirect = () => signInWithRedirect(auth, GoogleProvider)\n\n\nexport const db = getFirestore();\n\nexport const setUserDbFromAuth = async (userAuth, additionalInfor={}) => {\n    if (!userAuth) return;\n\n    const userDocRef = doc(db, 'users', userAuth.uid);\n    console.log('docRef :', userDocRef);\n\n    const userSnapshot = await getDoc(userDocRef)\n    console.log('snapshot :', userSnapshot);\n    console.log(userSnapshot.exists());\n\n    if (!userSnapshot.exists()) {\n        const email = userAuth.email;\n        const displayName = userAuth.displayName;\n        const createdAt = new Date();\n\n        try {\n            await setDoc(\n                userDocRef,\n                {\n                    email,\n                    displayName,\n                    createdAt,\n                    ...additionalInfor\n                }\n            );\n        } catch (eer) {\n            console.log('error creating the user', eer.message);\n        }\n    }\n\n    return userDocRef;\n}\n\nexport const createUserAuthWithEmailAndPassword = async (email, password) => {\n    if (!email | !password) {\n        console.log('이메일,암호가 전달되지 않음');\n        return;\n    }\n\n    return await createUserWithEmailAndPassword(auth, email, password);\n}\n\nexport const signInUserAuthWithEmailAndPassword = async (email, password) => {\n    if (!email | !password) {\n        console.log('이메일,암호가 전달되지 않음');\n        return;\n    }\n\n    return await signInWithEmailAndPassword(auth, email, password);\n}\n\nexport const signOutUser = async() => await signOut(auth);"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,SACIC,OADJ,EAEIC,kBAFJ,EAGIC,eAHJ,EAIIC,kBAJJ,EAKIC,8BALJ,EAMIC,0BANJ,EAOIC,OAPJ,QAQO,eARP;AAUA,SACIC,YADJ,EAEIC,GAFJ,EAGIC,MAHJ,EAIIC,MAJJ,QAKO,oBALP;AAOA,MAAMC,cAAc,GAAG;EACnBC,MAAM,EAAE,yCADW;EAEnBC,UAAU,EAAE,wCAFO;EAGnBC,SAAS,EAAE,wBAHQ;EAInBC,aAAa,EAAE,oCAJI;EAKnBC,iBAAiB,EAAE,cALA;EAMnBC,KAAK,EAAE;AANY,CAAvB;AASA,MAAMC,WAAW,GAAGnB,aAAa,CAACY,cAAD,CAAjC;AAEA,MAAMQ,cAAc,GAAG,IAAIhB,kBAAJ,EAAvB;AAEA,OAAO,MAAMiB,IAAI,GAAGpB,OAAO,EAApB;AACP,OAAO,MAAMqB,kBAAkB,GAAG,MAAMnB,eAAe,CAACkB,IAAD,EAAOD,cAAP,CAAhD;AACP,OAAO,MAAMG,qBAAqB,GAAG,MAAMrB,kBAAkB,CAACmB,IAAD,EAAOD,cAAP,CAAtD;AAGP,OAAO,MAAMI,EAAE,GAAGhB,YAAY,EAAvB;AAEP,OAAO,MAAMiB,iBAAiB,GAAG,gBAAOC,QAAP,EAAwC;EAAA,IAAvBC,eAAuB,uEAAP,EAAO;EACrE,IAAI,CAACD,QAAL,EAAe;EAEf,MAAME,UAAU,GAAGnB,GAAG,CAACe,EAAD,EAAK,OAAL,EAAcE,QAAQ,CAACG,GAAvB,CAAtB;EACAC,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBH,UAAxB;EAEA,MAAMI,YAAY,GAAG,MAAMtB,MAAM,CAACkB,UAAD,CAAjC;EACAE,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BC,YAA1B;EACAF,OAAO,CAACC,GAAR,CAAYC,YAAY,CAACC,MAAb,EAAZ;;EAEA,IAAI,CAACD,YAAY,CAACC,MAAb,EAAL,EAA4B;IACxB,MAAMC,KAAK,GAAGR,QAAQ,CAACQ,KAAvB;IACA,MAAMC,WAAW,GAAGT,QAAQ,CAACS,WAA7B;IACA,MAAMC,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;IAEA,IAAI;MACA,MAAM1B,MAAM,CACRiB,UADQ,EAER;QACIM,KADJ;QAEIC,WAFJ;QAGIC,SAHJ;QAII,GAAGT;MAJP,CAFQ,CAAZ;IASH,CAVD,CAUE,OAAOW,GAAP,EAAY;MACVR,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCO,GAAG,CAACC,OAA3C;IACH;EACJ;;EAED,OAAOX,UAAP;AACH,CA/BM;AAiCP,OAAO,MAAMY,kCAAkC,GAAG,OAAON,KAAP,EAAcO,QAAd,KAA2B;EACzE,IAAI,CAACP,KAAD,GAAS,CAACO,QAAd,EAAwB;IACpBX,OAAO,CAACC,GAAR,CAAY,iBAAZ;IACA;EACH;;EAED,OAAO,MAAM1B,8BAA8B,CAACgB,IAAD,EAAOa,KAAP,EAAcO,QAAd,CAA3C;AACH,CAPM;AASP,OAAO,MAAMC,kCAAkC,GAAG,OAAOR,KAAP,EAAcO,QAAd,KAA2B;EACzE,IAAI,CAACP,KAAD,GAAS,CAACO,QAAd,EAAwB;IACpBX,OAAO,CAACC,GAAR,CAAY,iBAAZ;IACA;EACH;;EAED,OAAO,MAAMzB,0BAA0B,CAACe,IAAD,EAAOa,KAAP,EAAcO,QAAd,CAAvC;AACH,CAPM;AASP,OAAO,MAAME,WAAW,GAAG,YAAW,MAAMpC,OAAO,CAACc,IAAD,CAA5C"},"metadata":{},"sourceType":"module"}