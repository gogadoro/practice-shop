{"ast":null,"code":"var _jsxFileName = \"/Users/5e9e/Desktop/projects/web_apps/react/capston/practice-shop/src/context/cart.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react'; //-------- 기타 함수\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst filteringProduct = (productToGo, cartItems) => {\n  console.log(cartItems); // 기존에 있으면 퀀티티만 추가, 기존에 없으면 새로추가. 항상 배열을 건드릴때는 그 구조에 대해서 생각\n\n  const existingProduct = cartItems.find(each => each.id === productToGo.id);\n\n  if (existingProduct) {\n    // 곂친경우니까 퀀티티만 더해줘야함. 나머지는 그대로 놓고 어떻게 퀀티티만 추가할거냐?\n    // 맵을 활용할거다. 그래서 있는애면 아이디가 곂칠테니까 걔만 퀀티티+1 나머지는 안건드리고 리턴\n    return cartItems.map(each => each.id === productToGo.id ? { ...each,\n      quantity: each.quantity + 1\n    } : each);\n  }\n\n  return [...cartItems, { ...productToGo,\n    qauntity: 1\n  }];\n}; //--------- 컨텍스트\n\n\nexport const CartContext = /*#__PURE__*/createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => {}\n});\nexport const CartItemContext = /*#__PURE__*/createContext({\n  cartItems: []\n});\nexport const CartProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [isOpenCart, setIsOpenCart] = useState(false);\n  const [cartItems, setCartItems] = useState([]);\n\n  const goToCart = productToGo => {\n    setCartItems(filteringProduct(productToGo, cartItems));\n  };\n\n  const value = {\n    isOpenCart,\n    setIsOpenCart,\n    cartItems,\n    goToCart\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CartProvider, \"OHGO8uqIm8irNCAUsFheynOWL7s=\");\n\n_c = CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useState","filteringProduct","productToGo","cartItems","console","log","existingProduct","find","each","id","map","quantity","qauntity","CartContext","isCartOpen","setIsCartOpen","CartItemContext","CartProvider","children","isOpenCart","setIsOpenCart","setCartItems","goToCart","value"],"sources":["/Users/5e9e/Desktop/projects/web_apps/react/capston/practice-shop/src/context/cart.context.jsx"],"sourcesContent":["import {createContext, useState} from 'react'\n\n//-------- 기타 함수\n\nconst filteringProduct = (productToGo, cartItems) => {\n  console.log(cartItems);\n  // 기존에 있으면 퀀티티만 추가, 기존에 없으면 새로추가. 항상 배열을 건드릴때는 그 구조에 대해서 생각\n  const existingProduct = cartItems.find((each) => (\n    each.id === productToGo.id\n  ))\n\n  if (existingProduct) {\n    // 곂친경우니까 퀀티티만 더해줘야함. 나머지는 그대로 놓고 어떻게 퀀티티만 추가할거냐?\n    // 맵을 활용할거다. 그래서 있는애면 아이디가 곂칠테니까 걔만 퀀티티+1 나머지는 안건드리고 리턴\n    return cartItems.map((each) => (\n      each.id === productToGo.id\n      ? {...each, quantity: each.quantity + 1}\n      : each\n    ))\n  }\n\n  return [...cartItems, {...productToGo, qauntity: 1}]\n}\n\n\n//--------- 컨텍스트\n\nexport const CartContext = createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => {}\n})\n\nexport const CartItemContext = createContext({\n  cartItems: [],\n})\n\n\nexport const CartProvider = ({children}) => {\n  const [isOpenCart, setIsOpenCart] = useState(false)\n  const [cartItems, setCartItems] = useState([])\n  \n  const goToCart = (productToGo) => {\n    setCartItems(filteringProduct(productToGo, cartItems))\n  }\n\n  const value = {isOpenCart, setIsOpenCart, cartItems, goToCart}\n  \n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>\n}\n"],"mappings":";;;AAAA,SAAQA,aAAR,EAAuBC,QAAvB,QAAsC,OAAtC,C,CAEA;;;;AAEA,MAAMC,gBAAgB,GAAG,CAACC,WAAD,EAAcC,SAAd,KAA4B;EACnDC,OAAO,CAACC,GAAR,CAAYF,SAAZ,EADmD,CAEnD;;EACA,MAAMG,eAAe,GAAGH,SAAS,CAACI,IAAV,CAAgBC,IAAD,IACrCA,IAAI,CAACC,EAAL,KAAYP,WAAW,CAACO,EADF,CAAxB;;EAIA,IAAIH,eAAJ,EAAqB;IACnB;IACA;IACA,OAAOH,SAAS,CAACO,GAAV,CAAeF,IAAD,IACnBA,IAAI,CAACC,EAAL,KAAYP,WAAW,CAACO,EAAxB,GACE,EAAC,GAAGD,IAAJ;MAAUG,QAAQ,EAAEH,IAAI,CAACG,QAAL,GAAgB;IAApC,CADF,GAEEH,IAHG,CAAP;EAKD;;EAED,OAAO,CAAC,GAAGL,SAAJ,EAAe,EAAC,GAAGD,WAAJ;IAAiBU,QAAQ,EAAE;EAA3B,CAAf,CAAP;AACD,CAlBD,C,CAqBA;;;AAEA,OAAO,MAAMC,WAAW,gBAAGd,aAAa,CAAC;EACvCe,UAAU,EAAE,KAD2B;EAEvCC,aAAa,EAAE,MAAM,CAAE;AAFgB,CAAD,CAAjC;AAKP,OAAO,MAAMC,eAAe,gBAAGjB,aAAa,CAAC;EAC3CI,SAAS,EAAE;AADgC,CAAD,CAArC;AAKP,OAAO,MAAMc,YAAY,GAAG,QAAgB;EAAA;;EAAA,IAAf;IAACC;EAAD,CAAe;EAC1C,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BpB,QAAQ,CAAC,KAAD,CAA5C;EACA,MAAM,CAACG,SAAD,EAAYkB,YAAZ,IAA4BrB,QAAQ,CAAC,EAAD,CAA1C;;EAEA,MAAMsB,QAAQ,GAAIpB,WAAD,IAAiB;IAChCmB,YAAY,CAACpB,gBAAgB,CAACC,WAAD,EAAcC,SAAd,CAAjB,CAAZ;EACD,CAFD;;EAIA,MAAMoB,KAAK,GAAG;IAACJ,UAAD;IAAaC,aAAb;IAA4BjB,SAA5B;IAAuCmB;EAAvC,CAAd;EAEA,oBAAO,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAEC,KAA7B;IAAA,UAAqCL;EAArC;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CAXM;;GAAMD,Y;;KAAAA,Y"},"metadata":{},"sourceType":"module"}