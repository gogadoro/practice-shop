{"ast":null,"code":"import { useSelector, useDispatch } from \"react-redux\";\nimport { createAction } from \"../../utils/reducer/reducer.utils\";\nimport { CART_ACTION_TYPE } from \"./cart.types\";\nimport { selectCartItems } from \"./cart.selector\"; // 이곳의 최종 결과물은 액션.  \n// const setData = (date) => createAction (type, data)\n\nexport const setCartItems = item => createAction(CART_ACTION_TYPE.SET_CART_ITEM, item);\nexport const setIsCartOpen = boolean => createAction(CART_ACTION_TYPE.SET_IS_CART_OPEN, boolean);\nconst cartItems = useSelector(selectCartItems);\nconst dispatch = useDispatch(); // main 함수들\n\nconst addCartItem = (productToGo, cartItems) => {\n  const existingProduct = cartItems.find(each => // 기존에 있으면 퀀티티만 추가, 기존에 없으면 새로추가. 항상 배열을 건드릴때는 그 구조에 대해서 생각\n  each.id === productToGo.id);\n\n  if (existingProduct) {\n    // 곂친경우니까 퀀티티만 더해줘야함. 나머지는 그대로 놓고 어떻게 퀀티티만 추가할거냐?\n    return cartItems.map(each => // 맵을 활용할거다. 그래서 있는애면 아이디가 곂칠테니까 걔만 퀀티티+1 나머지는 안건드리고 리턴\n    each.id === productToGo.id ? { ...each,\n      quantity: each.quantity + 1\n    } : each);\n  }\n\n  return [...cartItems, { ...productToGo,\n    quantity: 1\n  }];\n};\n\nconst decreaseCartItem = (theProduct, cartItems) => {\n  if (theProduct.quantity === 1) {\n    return cartItems.filter(item => item.id !== theProduct.id);\n  } else {\n    return cartItems.map(each => each.id === theProduct.id ? { ...each,\n      quantity: each.quantity - 1\n    } : each);\n  }\n};\n\nconst removeCartItem = (theProduct, cartItems) => cartItems.filter(item => item.id !== theProduct.id); // call 함수들 \n\n\nexport const callDecreaseCartItem = theProduct => {\n  dispatch(setCartItems(decreaseCartItem(theProduct, cartItems)));\n};\nexport const callRemoveCartItem = theProduct => {\n  dispatch(setCartItems(removeCartItem(theProduct, cartItems)));\n};\nexport const callAddCartItem = productToGo => {\n  dispatch(setCartItems(addCartItem(productToGo, cartItems)));\n};","map":{"version":3,"names":["useSelector","useDispatch","createAction","CART_ACTION_TYPE","selectCartItems","setCartItems","item","SET_CART_ITEM","setIsCartOpen","boolean","SET_IS_CART_OPEN","cartItems","dispatch","addCartItem","productToGo","existingProduct","find","each","id","map","quantity","decreaseCartItem","theProduct","filter","removeCartItem","callDecreaseCartItem","callRemoveCartItem","callAddCartItem"],"sources":["/Users/5e9e/Desktop/projects/web_apps/react/capston/practice-shop/src/store/cart/cart.action.js"],"sourcesContent":["import { useSelector, useDispatch } from \"react-redux\";\n\nimport { createAction } from \"../../utils/reducer/reducer.utils\";\nimport { CART_ACTION_TYPE } from \"./cart.types\";\nimport { selectCartItems } from \"./cart.selector\";\n\n\n// 이곳의 최종 결과물은 액션.  \n// const setData = (date) => createAction (type, data)\n\n\nexport const setCartItems = (item) =>\n   createAction(CART_ACTION_TYPE.SET_CART_ITEM, item)\n\nexport const setIsCartOpen = (boolean) =>\n   createAction(CART_ACTION_TYPE.SET_IS_CART_OPEN, boolean)\n\nconst cartItems = useSelector(selectCartItems)\nconst dispatch = useDispatch()\n\n// main 함수들\n\nconst addCartItem = (productToGo, cartItems) => {\n   const existingProduct = cartItems.find((each) => (   // 기존에 있으면 퀀티티만 추가, 기존에 없으면 새로추가. 항상 배열을 건드릴때는 그 구조에 대해서 생각\n      each.id === productToGo.id\n   ))\n   if (existingProduct) {                   // 곂친경우니까 퀀티티만 더해줘야함. 나머지는 그대로 놓고 어떻게 퀀티티만 추가할거냐?\n      return cartItems.map((each) => (       // 맵을 활용할거다. 그래서 있는애면 아이디가 곂칠테니까 걔만 퀀티티+1 나머지는 안건드리고 리턴\n         each.id === productToGo.id\n            ? { ...each, quantity: each.quantity + 1 }\n            : each\n      ))\n   }\n   return [...cartItems, { ...productToGo, quantity: 1 }]\n}\n\n\nconst decreaseCartItem = (theProduct, cartItems) => {\n   if (theProduct.quantity === 1) {\n      return cartItems.filter((item) => item.id !== theProduct.id)\n   } else {\n      return cartItems.map((each) => (\n         each.id === theProduct.id\n            ? { ...each, quantity: each.quantity - 1 }\n            : each\n      ))\n   }\n}\n\nconst removeCartItem = (theProduct, cartItems) => (\n   cartItems.filter((item) => item.id !== theProduct.id)\n)\n\n\n// call 함수들 \nexport const callDecreaseCartItem = (theProduct) => {\n   dispatch(setCartItems(decreaseCartItem(theProduct, cartItems)))\n}\n\n\nexport const callRemoveCartItem = (theProduct) => {\n   dispatch(setCartItems(removeCartItem(theProduct, cartItems)))\n}\n\nexport const callAddCartItem = (productToGo) => {\n   dispatch(setCartItems(addCartItem(productToGo, cartItems)))\n}\n\n\n\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,YAAT,QAA6B,mCAA7B;AACA,SAASC,gBAAT,QAAiC,cAAjC;AACA,SAASC,eAAT,QAAgC,iBAAhC,C,CAGA;AACA;;AAGA,OAAO,MAAMC,YAAY,GAAIC,IAAD,IACzBJ,YAAY,CAACC,gBAAgB,CAACI,aAAlB,EAAiCD,IAAjC,CADR;AAGP,OAAO,MAAME,aAAa,GAAIC,OAAD,IAC1BP,YAAY,CAACC,gBAAgB,CAACO,gBAAlB,EAAoCD,OAApC,CADR;AAGP,MAAME,SAAS,GAAGX,WAAW,CAACI,eAAD,CAA7B;AACA,MAAMQ,QAAQ,GAAGX,WAAW,EAA5B,C,CAEA;;AAEA,MAAMY,WAAW,GAAG,CAACC,WAAD,EAAcH,SAAd,KAA4B;EAC7C,MAAMI,eAAe,GAAGJ,SAAS,CAACK,IAAV,CAAgBC,IAAD,IAAc;EAClDA,IAAI,CAACC,EAAL,KAAYJ,WAAW,CAACI,EADH,CAAxB;;EAGA,IAAIH,eAAJ,EAAqB;IAAoB;IACtC,OAAOJ,SAAS,CAACQ,GAAV,CAAeF,IAAD,IAAkB;IACpCA,IAAI,CAACC,EAAL,KAAYJ,WAAW,CAACI,EAAxB,GACK,EAAE,GAAGD,IAAL;MAAWG,QAAQ,EAAEH,IAAI,CAACG,QAAL,GAAgB;IAArC,CADL,GAEKH,IAHD,CAAP;EAKF;;EACD,OAAO,CAAC,GAAGN,SAAJ,EAAe,EAAE,GAAGG,WAAL;IAAkBM,QAAQ,EAAE;EAA5B,CAAf,CAAP;AACF,CAZD;;AAeA,MAAMC,gBAAgB,GAAG,CAACC,UAAD,EAAaX,SAAb,KAA2B;EACjD,IAAIW,UAAU,CAACF,QAAX,KAAwB,CAA5B,EAA+B;IAC5B,OAAOT,SAAS,CAACY,MAAV,CAAkBjB,IAAD,IAAUA,IAAI,CAACY,EAAL,KAAYI,UAAU,CAACJ,EAAlD,CAAP;EACF,CAFD,MAEO;IACJ,OAAOP,SAAS,CAACQ,GAAV,CAAeF,IAAD,IAClBA,IAAI,CAACC,EAAL,KAAYI,UAAU,CAACJ,EAAvB,GACK,EAAE,GAAGD,IAAL;MAAWG,QAAQ,EAAEH,IAAI,CAACG,QAAL,GAAgB;IAArC,CADL,GAEKH,IAHD,CAAP;EAKF;AACH,CAVD;;AAYA,MAAMO,cAAc,GAAG,CAACF,UAAD,EAAaX,SAAb,KACpBA,SAAS,CAACY,MAAV,CAAkBjB,IAAD,IAAUA,IAAI,CAACY,EAAL,KAAYI,UAAU,CAACJ,EAAlD,CADH,C,CAKA;;;AACA,OAAO,MAAMO,oBAAoB,GAAIH,UAAD,IAAgB;EACjDV,QAAQ,CAACP,YAAY,CAACgB,gBAAgB,CAACC,UAAD,EAAaX,SAAb,CAAjB,CAAb,CAAR;AACF,CAFM;AAKP,OAAO,MAAMe,kBAAkB,GAAIJ,UAAD,IAAgB;EAC/CV,QAAQ,CAACP,YAAY,CAACmB,cAAc,CAACF,UAAD,EAAaX,SAAb,CAAf,CAAb,CAAR;AACF,CAFM;AAIP,OAAO,MAAMgB,eAAe,GAAIb,WAAD,IAAiB;EAC7CF,QAAQ,CAACP,YAAY,CAACQ,WAAW,CAACC,WAAD,EAAcH,SAAd,CAAZ,CAAb,CAAR;AACF,CAFM"},"metadata":{},"sourceType":"module"}