{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport { getCurrentUser, setUserDbFromAuth } from '../../utils/firebase/firebase';\nimport { signInFaild, signInSuccess } from \"./user.action\";\nimport { USER_ACTION_TYPE } from \"./user.types\";\nexport function* getSnapshotFromUser(userAuth, additionalDetails) {\n  try {\n    const userSnapshot = yield call(setUserDbFromAuth, userAuth, additionalDetails);\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFaild(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield call(getCurrentUser);\n    if (!userAuth) return;\n    yield call(getSnapshotFromUser, userAuth);\n  } catch (error) {\n    yield put(signInFaild(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(USER_ACTION_TYPE.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSaga() {\n  yield all([call(onCheckUserSession)]);\n}","map":{"version":3,"names":["takeLatest","put","all","call","getCurrentUser","setUserDbFromAuth","signInFaild","signInSuccess","USER_ACTION_TYPE","getSnapshotFromUser","userAuth","additionalDetails","userSnapshot","id","data","error","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","userSaga"],"sources":["/Users/5e9e/Desktop/projects/web_apps/react/capston/practice-shop/src/store/user/user.saga.js"],"sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport  {getCurrentUser, setUserDbFromAuth} from '../../utils/firebase/firebase'\nimport { signInFaild, signInSuccess } from \"./user.action\";\nimport { USER_ACTION_TYPE } from \"./user.types\";\n\n\n\n\nexport function* getSnapshotFromUser (userAuth, additionalDetails) {\n   try {\n      const userSnapshot = yield call(\n         setUserDbFromAuth, \n         userAuth, \n         additionalDetails\n      )\n         yield put(signInSuccess({id: userSnapshot.id, ...userSnapshot.data()}))\n   } catch(error) {\n      yield put(signInFaild(error));\n   }\n}\n\nexport function* isUserAuthenticated () {\n   try {\n      const userAuth = yield call(getCurrentUser);\n      if(!userAuth) return;\n      yield call(getSnapshotFromUser, userAuth)\n   } catch (error) {\n      yield put(signInFaild(error))\n   }\n   \n}\n\nexport function* onCheckUserSession () {\n   yield takeLatest(USER_ACTION_TYPE.CHECK_USER_SESSION, isUserAuthenticated)\n}\n\nexport function* userSaga () {\n   yield all([call(onCheckUserSession)]);\n}"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,SAASC,cAAT,EAAyBC,iBAAzB,QAAiD,+BAAjD;AACA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,eAA3C;AACA,SAASC,gBAAT,QAAiC,cAAjC;AAKA,OAAO,UAAUC,mBAAV,CAA+BC,QAA/B,EAAyCC,iBAAzC,EAA4D;EAChE,IAAI;IACD,MAAMC,YAAY,GAAG,MAAMT,IAAI,CAC5BE,iBAD4B,EAE5BK,QAF4B,EAG5BC,iBAH4B,CAA/B;IAKG,MAAMV,GAAG,CAACM,aAAa,CAAC;MAACM,EAAE,EAAED,YAAY,CAACC,EAAlB;MAAsB,GAAGD,YAAY,CAACE,IAAb;IAAzB,CAAD,CAAd,CAAT;EACL,CAPD,CAOE,OAAMC,KAAN,EAAa;IACZ,MAAMd,GAAG,CAACK,WAAW,CAACS,KAAD,CAAZ,CAAT;EACF;AACH;AAED,OAAO,UAAUC,mBAAV,GAAiC;EACrC,IAAI;IACD,MAAMN,QAAQ,GAAG,MAAMP,IAAI,CAACC,cAAD,CAA3B;IACA,IAAG,CAACM,QAAJ,EAAc;IACd,MAAMP,IAAI,CAACM,mBAAD,EAAsBC,QAAtB,CAAV;EACF,CAJD,CAIE,OAAOK,KAAP,EAAc;IACb,MAAMd,GAAG,CAACK,WAAW,CAACS,KAAD,CAAZ,CAAT;EACF;AAEH;AAED,OAAO,UAAUE,kBAAV,GAAgC;EACpC,MAAMjB,UAAU,CAACQ,gBAAgB,CAACU,kBAAlB,EAAsCF,mBAAtC,CAAhB;AACF;AAED,OAAO,UAAUG,QAAV,GAAsB;EAC1B,MAAMjB,GAAG,CAAC,CAACC,IAAI,CAACc,kBAAD,CAAL,CAAD,CAAT;AACF"},"metadata":{},"sourceType":"module"}