{"ast":null,"code":"var _jsxFileName = \"/Users/5e9e/Desktop/projects/web_apps/react/capston/practice-shop/src/context/cart.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from 'react'; //-------- 기타 함수\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst filteringProduct = (productToGo, cartItems) => {\n  // 기존에 있으면 퀀티티만 추가, 기존에 없으면 새로추가. 항상 배열을 건드릴때는 그 구조에 대해서 생각\n  const existingProduct = cartItems.find(each => each.id === productToGo.id);\n\n  if (existingProduct) {\n    // 곂친경우니까 퀀티티만 더해줘야함. 나머지는 그대로 놓고 어떻게 퀀티티만 추가할거냐?\n    // 맵을 활용할거다. 그래서 있는애면 아이디가 곂칠테니까 걔만 퀀티티+1 나머지는 안건드리고 리턴\n    return cartItems.map(each => each.id === productToGo.id ? { ...each,\n      quantity: each.quantity + 1\n    } : each);\n  }\n\n  return [...cartItems, { ...productToGo,\n    quantity: 1\n  }];\n};\n\nconst decreaseQuantity = (theProduct, cartItems) => {\n  if (theProduct.quantity === 1) {\n    return cartItems.filter(item => item.id !== theProduct.id);\n  } else {\n    return cartItems.map(each => each.id === theProduct.id ? { ...each,\n      quantity: each.quantity - 1\n    } : each);\n  }\n};\n\nconst removeTheProduct = (theProduct, cartItems) => cartItems.filter(item => item.id !== theProduct.id); //--------- 컨텍스트\n\n\nexport const CartContext = /*#__PURE__*/createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => {},\n  cartItems: [],\n  goToCart: () => {},\n  cartCount: 0,\n  decreaseCartItem: () => {},\n  removeCartItem: () => {},\n  totalCount: 0\n});\nexport const CartProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [isOpenCart, setIsOpenCart] = useState(false);\n  const [cartItems, setCartItems] = useState([]);\n  const [cartCount, setCartCount] = useState(0);\n  const [totalCount, setTotalCount] = useState(0);\n\n  const goToCart = productToGo => {\n    setCartItems(filteringProduct(productToGo, cartItems));\n  };\n\n  const decreaseCartItem = theProduct => {\n    setCartItems(decreaseQuantity(theProduct, cartItems));\n  };\n\n  const removeCartItem = theProduct => {\n    setCartItems(removeTheProduct(theProduct, cartItems));\n  };\n\n  useEffect(() => {\n    const newCartCount = cartItems.reduce((total, cartItem) => total + cartItem.quantity, 0);\n    setCartCount(newCartCount);\n  }, [cartItems]);\n  useEffect(() => {\n    const newTotalCount = cartItems.reduce((total, cartItem) => total + cartItem.quantity * cartItem.price, 0);\n    setTotalCount(newTotalCount);\n  }, [cartItems]);\n  const value = {\n    isOpenCart,\n    setIsOpenCart,\n    cartItems,\n    goToCart,\n    cartCount,\n    decreaseCartItem,\n    removeCartItem,\n    totalCount\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 10\n  }, this);\n};\n/*로직 : 카트 아이템 삭제\n\n기능 - x표시를 누르면 cartItems안에서 해당 아이템 삭제\n\n1. x클릭 -> 함수 : cartItem.filter((item) => { 로직 : item.id !== itemToDel.id })\n2. 문제는 itemToDel 을 어떻게 알아올 것이냐? \n   -> 체크아웃 아이템에서 버튼을 누르는거기 때문에 필요한 타겟 정보가 해당 컴포넌트에 있음\n3. \n\n*/\n\n_s(CartProvider, \"hauRCqX3C2nlUYFIb9SgxVMRk98=\");\n\n_c = CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","filteringProduct","productToGo","cartItems","existingProduct","find","each","id","map","quantity","decreaseQuantity","theProduct","filter","item","removeTheProduct","CartContext","isCartOpen","setIsCartOpen","goToCart","cartCount","decreaseCartItem","removeCartItem","totalCount","CartProvider","children","isOpenCart","setIsOpenCart","setCartItems","setCartCount","setTotalCount","newCartCount","reduce","total","cartItem","newTotalCount","price","value"],"sources":["/Users/5e9e/Desktop/projects/web_apps/react/capston/practice-shop/src/context/cart.context.jsx"],"sourcesContent":["import {createContext, useState, useEffect} from 'react'\n\n//-------- 기타 함수\n\nconst filteringProduct = (productToGo, cartItems) => {\n  // 기존에 있으면 퀀티티만 추가, 기존에 없으면 새로추가. 항상 배열을 건드릴때는 그 구조에 대해서 생각\n  const existingProduct = cartItems.find((each) => (\n    each.id === productToGo.id\n  ))\n\n  if (existingProduct) {\n    // 곂친경우니까 퀀티티만 더해줘야함. 나머지는 그대로 놓고 어떻게 퀀티티만 추가할거냐?\n    // 맵을 활용할거다. 그래서 있는애면 아이디가 곂칠테니까 걔만 퀀티티+1 나머지는 안건드리고 리턴\n    return cartItems.map((each) => (\n      each.id === productToGo.id\n      ? {...each, quantity: each.quantity + 1}\n      : each\n    ))\n  }\n\n  return [...cartItems, {...productToGo, quantity: 1}]\n}\n\nconst decreaseQuantity = (theProduct, cartItems) => {\n  \n  if (theProduct.quantity === 1) {\n    return   cartItems.filter((item) => item.id !== theProduct.id)\n  } else {\n    return cartItems.map((each) => (\n      each.id === theProduct.id \n      ? {...each, quantity: each.quantity - 1}\n        : each\n    ))\n  }\n}\n\nconst removeTheProduct = (theProduct, cartItems) => (\n  cartItems.filter((item) => item.id !== theProduct.id)\n)\n\n\n\n//--------- 컨텍스트\n\nexport const CartContext = createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => {},\n  cartItems: [],\n  goToCart: () => {},\n  cartCount: 0,\n  decreaseCartItem: () => {},\n  removeCartItem:() => {},\n  totalCount: 0,\n})\n\n\nexport const CartProvider = ({children}) => {\n  const [isOpenCart, setIsOpenCart] = useState(false)\n  const [cartItems, setCartItems] = useState([])\n  const [cartCount, setCartCount] = useState(0)\n  const [totalCount, setTotalCount] = useState(0)\n  \n  const goToCart = (productToGo) => {\n    setCartItems(filteringProduct(productToGo, cartItems))\n  }\n\n  const decreaseCartItem = (theProduct) => {\n    setCartItems(decreaseQuantity(theProduct, cartItems))\n  }\n\n  const removeCartItem = (theProduct) => {\n    setCartItems(removeTheProduct(theProduct, cartItems))\n  }\n\n\n  useEffect(()=>{\n    const newCartCount = cartItems.reduce((total, cartItem) =>\n    total + cartItem.quantity, 0)\n    setCartCount(newCartCount)\n  },[cartItems])\n\n\n  useEffect(()=>{\n    const newTotalCount = cartItems.reduce((total, cartItem) =>\n    total + (cartItem.quantity * cartItem.price)  , 0)\n    setTotalCount(newTotalCount)\n  },[cartItems])\n  \n  const value = {\n    isOpenCart, \n    setIsOpenCart, \n    cartItems, \n    goToCart, \n    cartCount,\n    decreaseCartItem,\n    removeCartItem,\n    totalCount,\n  }\n  \n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>\n}\n\n\n/*로직 : 카트 아이템 삭제\n\n기능 - x표시를 누르면 cartItems안에서 해당 아이템 삭제\n\n1. x클릭 -> 함수 : cartItem.filter((item) => { 로직 : item.id !== itemToDel.id })\n2. 문제는 itemToDel 을 어떻게 알아올 것이냐? \n   -> 체크아웃 아이템에서 버튼을 누르는거기 때문에 필요한 타겟 정보가 해당 컴포넌트에 있음\n3. \n\n*/\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}