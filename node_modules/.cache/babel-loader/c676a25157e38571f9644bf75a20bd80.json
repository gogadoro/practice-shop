{"ast":null,"code":"var _jsxFileName = \"/Users/5e9e/Desktop/projects/web_apps/react/capston/practice-shop/src/component/product-card/product-card.jsx\";\nimport { useSelector } from 'react-redux';\nimport { selectCartItems } from '../../store/cart/cart.selector';\nimport { setCartItems } from '../../store/cart/cart.action';\nimport Button, { BUTTON_TYPE } from '../button/button';\nimport { Div_ProductContainer, Div_Footer, Span_Name, Span_Price } from './product-card.styles.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dispatch = useDispatch();\n\nconst filteringProduct = (productToGo, cartItems) => {\n  // 기존에 있으면 퀀티티만 추가, 기존에 없으면 새로추가. 항상 배열을 건드릴때는 그 구조에 대해서 생각\n  const existingProduct = cartItems.find(each => each.id === productToGo.id);\n\n  if (existingProduct) {\n    // 곂친경우니까 퀀티티만 더해줘야함. 나머지는 그대로 놓고 어떻게 퀀티티만 추가할거냐?\n    // 맵을 활용할거다. 그래서 있는애면 아이디가 곂칠테니까 걔만 퀀티티+1 나머지는 안건드리고 리턴\n    return cartItems.map(each => each.id === productToGo.id ? { ...each,\n      quantity: each.quantity + 1\n    } : each);\n  }\n\n  return [...cartItems, { ...productToGo,\n    quantity: 1\n  }];\n};\n\nconst cartItems = useSelector(selectCartItems);\nexport const goToCart = productToGo => {\n  dispatch(setCartItems(filteringProduct(productToGo, cartItems)));\n};\n\nconst ProductCard = _ref => {\n  let {\n    product\n  } = _ref;\n  const {\n    name,\n    price,\n    imageUrl\n  } = product;\n  return /*#__PURE__*/_jsxDEV(Div_ProductContainer, {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: imageUrl,\n      alt: `${name}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Div_Footer, {\n      children: [/*#__PURE__*/_jsxDEV(Span_Name, {\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Span_Price, {\n        children: price\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: goToCart(product),\n      buttonType: BUTTON_TYPE.inverted,\n      children: \" \\uCE74\\uD2B8\\uC5D0 \\uB2F4\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ProductCard;\nexport default ProductCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductCard\");","map":{"version":3,"names":["useSelector","selectCartItems","setCartItems","Button","BUTTON_TYPE","Div_ProductContainer","Div_Footer","Span_Name","Span_Price","dispatch","useDispatch","filteringProduct","productToGo","cartItems","existingProduct","find","each","id","map","quantity","goToCart","ProductCard","product","name","price","imageUrl","inverted"],"sources":["/Users/5e9e/Desktop/projects/web_apps/react/capston/practice-shop/src/component/product-card/product-card.jsx"],"sourcesContent":["import { useSelector } from 'react-redux';\n\nimport { selectCartItems } from '../../store/cart/cart.selector';\nimport { setCartItems } from '../../store/cart/cart.action';\nimport Button, { BUTTON_TYPE } from '../button/button';\nimport {\n  Div_ProductContainer,\n  Div_Footer,\n  Span_Name,\n  Span_Price,\n} from './product-card.styles.jsx';\n\nconst dispatch = useDispatch()\n\nconst filteringProduct = (productToGo, cartItems) => {\n  // 기존에 있으면 퀀티티만 추가, 기존에 없으면 새로추가. 항상 배열을 건드릴때는 그 구조에 대해서 생각\n  const existingProduct = cartItems.find((each) => (\n    each.id === productToGo.id\n  ))\n\n  if (existingProduct) {\n    // 곂친경우니까 퀀티티만 더해줘야함. 나머지는 그대로 놓고 어떻게 퀀티티만 추가할거냐?\n    // 맵을 활용할거다. 그래서 있는애면 아이디가 곂칠테니까 걔만 퀀티티+1 나머지는 안건드리고 리턴\n    return cartItems.map((each) => (\n      each.id === productToGo.id\n        ? { ...each, quantity: each.quantity + 1 }\n        : each\n    ))\n  }\n\n  return [...cartItems, { ...productToGo, quantity: 1 }]\n}\n\nconst cartItems = useSelector(selectCartItems)\n\nexport const goToCart = (productToGo) => {\n  dispatch(setCartItems(filteringProduct(productToGo, cartItems)))\n}\n\nconst ProductCard = ({ product }) => {\n\n\n\n\n  const { name, price, imageUrl } = product;\n\n  return (\n    <Div_ProductContainer>\n      <img src={imageUrl} alt={`${name}`} />\n      <Div_Footer>\n        <Span_Name>{name}</Span_Name>\n        <Span_Price>{price}</Span_Price>\n      </Div_Footer>\n      <Button\n        onClick={goToCart(product)}\n        buttonType={BUTTON_TYPE.inverted}\n      > 카트에 담기\n      </Button>\n    </Div_ProductContainer>\n  )\n}\n\nexport default ProductCard;"],"mappings":";AAAA,SAASA,WAAT,QAA4B,aAA5B;AAEA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,OAAOC,MAAP,IAAiBC,WAAjB,QAAoC,kBAApC;AACA,SACEC,oBADF,EAEEC,UAFF,EAGEC,SAHF,EAIEC,UAJF,QAKO,2BALP;;AAOA,MAAMC,QAAQ,GAAGC,WAAW,EAA5B;;AAEA,MAAMC,gBAAgB,GAAG,CAACC,WAAD,EAAcC,SAAd,KAA4B;EACnD;EACA,MAAMC,eAAe,GAAGD,SAAS,CAACE,IAAV,CAAgBC,IAAD,IACrCA,IAAI,CAACC,EAAL,KAAYL,WAAW,CAACK,EADF,CAAxB;;EAIA,IAAIH,eAAJ,EAAqB;IACnB;IACA;IACA,OAAOD,SAAS,CAACK,GAAV,CAAeF,IAAD,IACnBA,IAAI,CAACC,EAAL,KAAYL,WAAW,CAACK,EAAxB,GACI,EAAE,GAAGD,IAAL;MAAWG,QAAQ,EAAEH,IAAI,CAACG,QAAL,GAAgB;IAArC,CADJ,GAEIH,IAHC,CAAP;EAKD;;EAED,OAAO,CAAC,GAAGH,SAAJ,EAAe,EAAE,GAAGD,WAAL;IAAkBO,QAAQ,EAAE;EAA5B,CAAf,CAAP;AACD,CAjBD;;AAmBA,MAAMN,SAAS,GAAGb,WAAW,CAACC,eAAD,CAA7B;AAEA,OAAO,MAAMmB,QAAQ,GAAIR,WAAD,IAAiB;EACvCH,QAAQ,CAACP,YAAY,CAACS,gBAAgB,CAACC,WAAD,EAAcC,SAAd,CAAjB,CAAb,CAAR;AACD,CAFM;;AAIP,MAAMQ,WAAW,GAAG,QAAiB;EAAA,IAAhB;IAAEC;EAAF,CAAgB;EAKnC,MAAM;IAAEC,IAAF;IAAQC,KAAR;IAAeC;EAAf,IAA4BH,OAAlC;EAEA,oBACE,QAAC,oBAAD;IAAA,wBACE;MAAK,GAAG,EAAEG,QAAV;MAAoB,GAAG,EAAG,GAAEF,IAAK;IAAjC;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,UAAD;MAAA,wBACE,QAAC,SAAD;QAAA,UAAYA;MAAZ;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,QAAC,UAAD;QAAA,UAAaC;MAAb;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF,eAME,QAAC,MAAD;MACE,OAAO,EAAEJ,QAAQ,CAACE,OAAD,CADnB;MAEE,UAAU,EAAElB,WAAW,CAACsB,QAF1B;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QANF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAcD,CArBD;;KAAML,W;AAuBN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}